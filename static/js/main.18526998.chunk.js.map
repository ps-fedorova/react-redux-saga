{"version":3,"sources":["redux/actions.js","redux/types.js","components/Alert.js","components/PostForm.js","components/Post.js","components/Posts.js","components/Loader.js","components/FetchedPosts.js","App.js","serviceWorker.js","redux/postsReducer.js","redux/appReducer.js","redux/rootReducer.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["showAlert","text","dispatch","type","payload","setTimeout","Alert","className","role","PostForm","props","submitHandler","event","preventDefault","title","state","trim","newPost","id","Date","now","toString","createPost","setState","changeInputHandler","persist","prev","target","name","value","onSubmit","this","htmlFor","placeholder","onChange","alert","React","Component","mapDispatchToProps","post","connect","appReducerKey","syncPosts","postsReducerKey","posts","length","map","Post","key","Loader","style","width","height","useDispatch","useSelector","fetchedPosts","loading","onClick","App","FetchedPosts","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","forbidden","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","thunk","next","filter","w","includes","run","app","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18526998.chunk.js","sourcesContent":["import {CREATE_POST, FETCH_POSTS, HIDE_ALERT, HIDE_LOADER, REQUEST_POSTS, SHOW_ALERT, SHOW_LOADER} from './types'\r\n\r\nexport function createPost(post) {\r\n  return {\r\n    type: CREATE_POST,\r\n    payload: post\r\n  }\r\n}\r\n\r\nexport function showLoader() {\r\n  return {\r\n    type: SHOW_LOADER\r\n  }\r\n}\r\n\r\nexport function hideLoader() {\r\n  return {\r\n    type: HIDE_LOADER\r\n  }\r\n}\r\n\r\nexport function showAlert(text) {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: SHOW_ALERT,\r\n      payload: text\r\n    })\r\n\r\n    setTimeout(() => {\r\n      dispatch(hideAlert())\r\n    }, 3000)\r\n  }\r\n}\r\n\r\nexport function hideAlert() {\r\n  return {\r\n    type: HIDE_ALERT\r\n  }\r\n}\r\n\r\nexport function fetchPosts() {\r\n  return {\r\n    type: REQUEST_POSTS\r\n  }\r\n  // return async dispatch => {\r\n  //   try {\r\n  //     dispatch(showLoader())\r\n  //     const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5')\r\n  //     const json = await response.json()\r\n  //     setTimeout(() => {\r\n  //       dispatch({ type: FETCH_POSTS, payload: json })\r\n  //       dispatch(hideLoader())\r\n  //     }, 500)\r\n  //   } catch (e) {\r\n  //     dispatch(showAlert('Что-то пошло не так'))\r\n  //     dispatch(hideLoader())\r\n  //   }\r\n  // }\r\n}\r\n","export const CREATE_POST = 'POST/CREATE_POST' // POST (префикс) - это модуль, к которому относится данный экшин\r\nexport const FETCH_POSTS = 'POST/FETCH_POSTS'\r\nexport const REQUEST_POSTS = 'POST/REQUEST_POSTS'\r\nexport const SHOW_LOADER = 'APP/SHOW_LOADER'\r\nexport const HIDE_LOADER = 'APP/HIDE_LOADER'\r\nexport const SHOW_ALERT = 'APP/SHOW_ALERT'\r\nexport const HIDE_ALERT = 'APP/HIDE_ALERT'\r\n","import React from 'react'\r\n\r\nexport const Alert = ({ text }) => (\r\n  <div className=\"alert alert-warning\" role=\"alert\">\r\n    {text}\r\n  </div>\r\n)\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {createPost, showAlert} from '../redux/actions'\r\nimport {Alert} from './Alert'\r\n\r\nclass PostForm extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      title: ''\r\n    }\r\n  }\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault()\r\n\r\n    const {title} = this.state\r\n\r\n    if (!title.trim()) {\r\n      return this.props.showAlert('Название поста не может быть пустым')\r\n    }\r\n    const newPost = {\r\n      title, id: Date.now().toString()\r\n    }\r\n\r\n    this.props.createPost(newPost)\r\n    this.setState({ title: '' })\r\n\r\n  }\r\n\r\n  changeInputHandler = event => {\r\n    event.persist()\r\n    this.setState(prev => ({...prev, ...{\r\n      [event.target.name]: event.target.value\r\n    }}))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.submitHandler}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"title\"/>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            placeholder=\"напишите пост\"\r\n            value={this.state.title}\r\n            name=\"title\"\r\n            onChange={this.changeInputHandler}\r\n          />\r\n        </div>\r\n        {this.props.alert && <Alert text={this.props.alert} />}\r\n        <button className=\"btn btn-success\" type=\"submit\">Создать</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  createPost, showAlert\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  alert: state.appReducerKey.alert\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm)\r\n// первый аргумент - стейт, второй - массив action-ов, которые необходимо спроецировать на свойства данного компонента\r\n","import React from 'react'\r\n\r\nexport default ({ post }) => {\r\n  return (\r\n    <div className=\"card my-2\">\r\n      <div className=\"card-body p-2\">\r\n        <h5 className=\"card-title\">{post.title}</h5>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {connect} from 'react-redux' // HOC, позволяет получить данные из state\r\nimport Post from './Post'\r\n\r\nconst Posts = ({syncPosts}) => {\r\n  if (!syncPosts.length) {\r\n    return <p className=\"pt-3\">Постов пока нет</p>\r\n  }\r\n  return syncPosts.map(post => <Post post={post} key={post.id} />)\r\n}\r\n\r\nconst mapStateToProps = state => { // функция преобразовывает (мапит) весь стейт в пропсы\r\n  return {\r\n    syncPosts: state.postsReducerKey.posts // нам нужно преобразовать только конкретные поля\r\n  } // syncPosts - произвольное название переменной\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Posts)\r\n// мы можем работать напрямую со стором с помощью connect, т.е., не нужно прокидывать пропсы\r\n","import React from 'react'\r\n\r\nexport const Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <div className=\"spinner-border cen\" style={{ width: \"3rem\", height: \"3rem\"}} role=\"status\">\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  </div>\r\n)\r\n","import React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Post from './Post'\r\nimport {fetchPosts} from '../redux/actions'\r\nimport {Loader} from './Loader'\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch()\r\n  // обозначаем, что нам нужно достать из стора (хук useSelector)\r\n  const posts = useSelector(state => state.postsReducerKey.fetchedPosts)\r\n  const loading = useSelector(state => state.appReducerKey.loading)\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n\r\n  if (!posts.length) {\r\n    return <button\r\n      className=\"btn btn-primary\"\r\n      onClick={() => dispatch(fetchPosts())}\r\n    >Загрузить</button>\r\n  }\r\n  return posts.map(post => <Post post={post} key={post.id} />)\r\n}\r\n","import React from 'react';\r\nimport PostForm from './components/PostForm'\r\nimport Posts from './components/Posts'\r\nimport FetchedPosts from './components/FetchedPosts'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container pt-3\">\r\n      <h1 className=\"p-5 mb-5 text-center\">react-redux-saga</h1>\r\n      <div className=\"row\">\r\n        <div className=\"col mx-5\">\r\n          <h2 className=\"mb-4\">Синхронные Посты</h2>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <PostForm />\r\n            </div>\r\n          </div>\r\n          <Posts />\r\n        </div>\r\n        <div className=\"col mx-5\">\r\n          <h2 className=\"mb-5\">Асинхронные посты</h2>\r\n          <FetchedPosts />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { CREATE_POST, FETCH_POSTS } from './types'\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  fetchedPosts: []\r\n}\r\n\r\n// Pure Functions\r\nexport const postsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_POST:\r\n      return { ...state, posts: [...state.posts, action.payload] } // старый массив постов + новый пост\r\n    // return { ...state, posts: state.posts.concat([action.payload]) }\r\n\r\n    // когда у нас происходит событие CREATE_POST, мы должны вернуть\r\n    // копию стейта - ...state, (иммутабельность), дальше нам нужно создать новый пост в списке,\r\n    // основываясь на предыдущем значении массива. Предыдущее значение массива лежит в state.posts\r\n    // нельзя использовать push, потому что он мутирует состояние, а нам нужен новый объект.\r\n\r\n    // Метод concat() возвращает новый массив, состоящий из массива, на котором он был вызван,\r\n    // соединённого с другими массивами и/или значениями, переданными в качестве аргументов.\r\n\r\n    // const array1 = ['a', 'b', 'c'];\r\n    // const array2 = ['d', 'e', 'f'];\r\n    // const array3 = array1.concat(array2);\r\n    //\r\n    // console.log(array3);\r\n//  // expected output: Array [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\r\n\r\n    case FETCH_POSTS:\r\n      return { ...state, fetchedPosts: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER} from './types'\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  alert: null\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SHOW_LOADER:\r\n      return {...state, loading: true}\r\n    case HIDE_LOADER:\r\n      return {...state, loading: false}\r\n    case SHOW_ALERT:\r\n      return {...state, alert: action.payload}\r\n    case HIDE_ALERT:\r\n      return {...state, alert: null}\r\n    default: return state\r\n  }\r\n}\r\n","import {combineReducers} from 'redux'\r\nimport {postsReducer} from './postsReducer'\r\nimport {appReducer} from './appReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  postsReducerKey: postsReducer,\r\n  appReducerKey: appReducer\r\n})\r\n","import {CREATE_POST} from './types'\r\nimport {showAlert} from './actions'\r\n\r\nconst forbidden = ['fuck', 'spam', 'php']\r\n\r\nexport function forbiddenWordsMiddleware({ dispatch }) {\r\n  return function(next) {\r\n    return function(action) {\r\n      if (action.type === CREATE_POST) {\r\n        const found = forbidden.filter(w => action.payload.title.includes(w))\r\n        if (found.length) {\r\n          return dispatch(showAlert('Вы спамер. Мы вас не звали, идите домой'))\r\n        }\r\n      }\r\n      return next(action)\r\n    }\r\n  }\r\n}\r\n","import { takeEvery, put, call } from 'redux-saga/effects'\r\nimport { FETCH_POSTS, REQUEST_POSTS } from './types'\r\nimport { hideLoader, showAlert, showLoader } from './actions'\r\n\r\nexport function* sagaWatcher() { // * - превратить функцию в генератор\r\n  yield takeEvery(REQUEST_POSTS, sagaWorker) // добавляем side effect, который говорит:\r\n  // нам необходимо обрабатывать каждый экшин, поступающий в стор - takeEvery\r\n  // нам нужно каждый - takeEvery, но есть и другие вариации\r\n\r\n  // на каждый REQUEST_POSTS мы будем выполнять side effect sagaWorker\r\n  // чтобы генератор работал, нам необходимо добавлять приставку yield \"передать управление\"\r\n}\r\n\r\nfunction* sagaWorker() {\r\n  try {\r\n    yield put(showLoader()) // put позволяет диспатчить определенные события в store\r\n    const payload = yield call(fetchPosts) // нам необходимо подождать, пока мы выполним с помощью функции call\r\n    // метод fetchPosts\r\n    yield put({ type: FETCH_POSTS, payload }) // вставить наши загружнные посты\r\n    yield put(hideLoader()) // скрыть лоадер\r\n// сюда просто так нельзя запихнуть setTimeout, потому что внутри генераторов и только внутри них\r\n// существует оператор yield\r\n  } catch (e) {\r\n    yield put(showAlert('Что-то пошло не так'))\r\n    yield put(hideLoader())\r\n  }\r\n}\r\n\r\nasync function fetchPosts() { // функция, которая делает загрузку с сервера\r\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5')\r\n  return await response.json()\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk'; // для работы с асинхронностью - либо saga\r\nimport createSagaMiddleware from 'redux-saga'; // позволяет работать с side effects в redux\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { rootReducer } from './redux/rootReducer'\r\nimport { forbiddenWordsMiddleware } from './redux/middleware'; // чтобы запретить некоторые слова и не публиковать пост, содержащий их\r\nimport { sagaWatcher } from './redux/sagas';\r\n\r\nconst saga = createSagaMiddleware()\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools( // составить (объединить мидлверы c помощью  браузерного расширения)\r\n  applyMiddleware(thunk, forbiddenWordsMiddleware, saga)\r\n))\r\n\r\nsaga.run(sagaWatcher)\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>\r\n)\r\n\r\nrender(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}